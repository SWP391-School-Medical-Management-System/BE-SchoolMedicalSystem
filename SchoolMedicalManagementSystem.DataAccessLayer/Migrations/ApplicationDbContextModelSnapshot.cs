// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolMedicalManagementSystem.DataAccessLayer.Context;

#nullable disable

namespace SchoolMedicalManagementSystem.DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentId");

                    b.HasIndex("StaffCode");

                    b.HasIndex("StudentCode");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a1a9e51-a0e5-4dc9-8698-9bedd2ca422d"),
                            Address = "School Medical System Headquarters",
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 787, DateTimeKind.Local).AddTicks(3771),
                            Email = "admin@schoolmedical.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            IsDeleted = false,
                            PasswordHash = "fcf7bb6d546cfb82d2e55486984ae7a1862a666acb441e0cf8b4ed34a4fcf9d7",
                            PhoneNumber = "0987654321",
                            StaffCode = "AD123",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CounselorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowUpPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HealthCheckResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate");

                    b.HasIndex("CounselorId");

                    b.HasIndex("HealthCheckResultId");

                    b.HasIndex("HealthEventId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.BlogComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryName");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsPublished");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ConductedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleOrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConductedById");

                    b.HasIndex("ScheduledDate");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCheckItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("NurseId");

                    b.ToTable("HealthCheckAssignments");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SchoolClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("HealthCheckClasses");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsentFormUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthCheckConsents");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Categories")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCheckAssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double?>("MinValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckAssignmentId");

                    b.HasIndex("HealthCheckId");

                    b.ToTable("HealthCheckItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAbnormality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OverallAssessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HasAbnormality");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("UserId");

                    b.ToTable("HealthCheckResults");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResultItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCheckItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCheckResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNormal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckItemId");

                    b.HasIndex("HealthCheckResultId");

                    b.ToTable("HealthCheckResultItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignmentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unassigned");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentHealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("HandledById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Outcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelatedMedicalConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("HandledById");

                    b.HasIndex("IsEmergency");

                    b.HasIndex("OccurredAt");

                    b.HasIndex("RelatedMedicalConditionId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("HealthEvents");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEventMedicalItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Dose")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalItemUsageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("MedicalPerOnce")
                        .HasColumnType("float");

                    b.Property<string>("MedicationDosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MedicationQuantity")
                        .HasColumnType("float");

                    b.Property<string>("NurseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SupplyQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HealthEventId");

                    b.HasIndex("MedicalItemUsageId")
                        .IsUnique();

                    b.ToTable("HealthEventMedicalItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HearingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeftEar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RightEar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("RecordedBy");

                    b.ToTable("HearingRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiastolicBloodPressure")
                        .HasColumnType("float");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("HeartRate")
                        .HasColumnType("float");

                    b.Property<string>("Hospital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("SystolicBloodPressure")
                        .HasColumnType("float");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("Severity");

                    b.HasIndex("Type");

                    b.ToTable("MedicalConditions");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("Quantity");

                    b.HasIndex("RequestedById");

                    b.HasIndex("Type");

                    b.ToTable("MedicalItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItemUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HealthEventId");

                    b.HasIndex("MedicalItemId");

                    b.HasIndex("UsedById");

                    b.ToTable("MedicalItemUsages");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationAdministration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualDosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdministeredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AdministeredById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefusalReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffectsObserved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentMedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StudentRefused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AdministeredAt");

                    b.HasIndex("AdministeredById");

                    b.HasIndex("StudentMedicationId");

                    b.ToTable("StudentMedicationAdministrations");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AttendanceCheckedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConfirmedByNurseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MissedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MissedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReminderCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("ReminderSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReminderSentAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresNurseConfirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduledDosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ScheduledTime")
                        .HasColumnType("time");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("StudentMedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StudentPresent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("ScheduledTime");

                    b.HasIndex("Status");

                    b.HasIndex("StudentMedicationId");

                    b.HasIndex("ScheduledDate", "Status");

                    b.HasIndex("StudentMedicationId", "ScheduledDate");

                    b.ToTable("MedicationSchedules");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInitialStock")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityAdded")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentMedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentMedicationId");

                    b.ToTable("MedicationStocks");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDismissed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresConfirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VaccinationRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("HealthEventId");

                    b.HasIndex("IsRead");

                    b.HasIndex("NotificationType");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("VaccinationRecordId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.PhysicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("RecordedBy");

                    b.ToTable("PhysicalRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndPeriod")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GeneratedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartPeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EndPeriod");

                    b.HasIndex("GeneratedById");

                    b.HasIndex("ReportType");

                    b.HasIndex("StartPeriod");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a388e2b-a398-4c6f-872c-9c318df9b000"),
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 786, DateTimeKind.Local).AddTicks(8440),
                            IsDeleted = false,
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2b587a39-c4f1-4e7c-908b-0a22951a2a94"),
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 786, DateTimeKind.Local).AddTicks(8517),
                            IsDeleted = false,
                            Name = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("3c31e27c-3c6d-4a1b-a520-5db6a8e3fdb1"),
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 786, DateTimeKind.Local).AddTicks(8564),
                            IsDeleted = false,
                            Name = "SCHOOLNURSE"
                        },
                        new
                        {
                            Id = new Guid("4d4eddd2-3396-4b1a-981b-c82f638d1e89"),
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 786, DateTimeKind.Local).AddTicks(8584),
                            IsDeleted = false,
                            Name = "PARENT"
                        },
                        new
                        {
                            Id = new Guid("5e0bd535-7f4b-439f-a31f-32d31c9e146a"),
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 786, DateTimeKind.Local).AddTicks(8619),
                            IsDeleted = false,
                            Name = "STUDENT"
                        });
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.SchoolClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentClass", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoGenerateSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FrequencyCount")
                        .HasColumnType("int");

                    b.Property<string>("FrequencyUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LowStockAlertSent")
                        .HasColumnType("bit");

                    b.Property<string>("ManagementNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinStockThreshold")
                        .HasColumnType("int");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrescriptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityReceive")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySent")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityUnit")
                        .HasColumnType("int");

                    b.Property<int>("Received")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainingDoses")
                        .HasColumnType("int");

                    b.Property<bool>("RequireNurseConfirmation")
                        .HasColumnType("bit");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkipDates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkipOnAbsence")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipWeekends")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("PendingApproval");

                    b.Property<string>("StorageInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentMedicationRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimesOfDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDay")
                        .HasColumnType("int");

                    b.Property<int>("TotalDoses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EndDate");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("ParentId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentMedicationRequestId");

                    b.ToTable("StudentMedications");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedicationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMedicationRequest");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedicationUsageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdministeredBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdministeredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageUse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentMedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdministeredBy");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentMedicationId");

                    b.ToTable("StudentMedicationUsageHistories");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8a1a9e51-a0e5-4dc9-8698-9bedd2ca422d"),
                            RoleId = new Guid("1a388e2b-a398-4c6f-872c-9c318df9b000"),
                            CreatedDate = new DateTime(2025, 7, 20, 18, 21, 48, 787, DateTimeKind.Local).AddTicks(4002),
                            Id = new Guid("db585145-039a-4cc9-a141-9bb9238a94f8"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("NurseId");

                    b.HasIndex("SessionId");

                    b.ToTable("VaccinationAssignments");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsentFormUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationConsents");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdministeredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AdministeredByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdministeredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoteAfterSession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VaccinationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaccinationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdministeredByUserId");

                    b.HasIndex("AdministeredDate");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccinationTypeId");

                    b.ToTable("VaccinationRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Posology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleOrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VaccineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VaccineTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StartTime");

                    b.HasIndex("Status");

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("VaccinationSessions");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSessionClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SessionId");

                    b.ToTable("VaccinationSessionClasses");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoseCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedAge")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VaccinationTypes");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VisionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LeftEye")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RightEye")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("RecordedBy");

                    b.ToTable("VisionRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Appointment", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Counselor")
                        .WithMany()
                        .HasForeignKey("CounselorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResult", "HealthCheckResult")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthCheckResultId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", "HealthEvent")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthEventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Counselor");

                    b.Navigation("HealthCheckResult");

                    b.Navigation("HealthEvent");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.BlogComment", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.BlogPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "User")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.BlogPost", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "ConductedBy")
                        .WithMany("ConductedHealthChecks")
                        .HasForeignKey("ConductedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ConductedBy");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckAssignment", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("HealthCheckAssignments")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckClass", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("HealthCheckClasses")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.SchoolClass", "SchoolClass")
                        .WithMany()
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckConsent", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("HealthCheckConsents")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Parent")
                        .WithMany("ParentHealthCheckConsents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany("HealthCheckConsents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckItem", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckAssignment", "HealthCheckAssignment")
                        .WithMany("HealthCheckItems")
                        .HasForeignKey("HealthCheckAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("CheckItems")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("HealthCheckAssignment");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResult", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("Results")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResultItem", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckItem", "HealthCheckItem")
                        .WithMany("ResultItems")
                        .HasForeignKey("HealthCheckItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResult", "HealthCheckResult")
                        .WithMany("ResultItems")
                        .HasForeignKey("HealthCheckResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckItem");

                    b.Navigation("HealthCheckResult");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "HandledBy")
                        .WithMany("HandledHealthEvents")
                        .HasForeignKey("HandledById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalCondition", "RelatedMedicalCondition")
                        .WithMany()
                        .HasForeignKey("RelatedMedicalConditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HandledBy");

                    b.Navigation("RelatedMedicalCondition");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEventMedicalItem", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", "HealthEvent")
                        .WithMany("HealthEventMedicalItems")
                        .HasForeignKey("HealthEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItemUsage", "MedicalItemUsage")
                        .WithOne("HealthEventMedicalItem")
                        .HasForeignKey("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEventMedicalItem", "MedicalItemUsageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthEvent");

                    b.Navigation("MedicalItemUsage");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HearingRecord", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("HearingRecords")
                        .HasForeignKey("HealthCheckId");

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("HearingRecords")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "RecordedByUser")
                        .WithMany()
                        .HasForeignKey("RecordedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("MedicalRecord");

                    b.Navigation("RecordedByUser");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalCondition", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("MedicalConditions")
                        .HasForeignKey("HealthCheckId");

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalConditions")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItem", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById");

                    b.Navigation("ApprovedBy");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItemUsage", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", "HealthEvent")
                        .WithMany("MedicalItemsUsed")
                        .HasForeignKey("HealthEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItem", "MedicalItem")
                        .WithMany("Usages")
                        .HasForeignKey("MedicalItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "UsedBy")
                        .WithMany()
                        .HasForeignKey("UsedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("HealthEvent");

                    b.Navigation("MedicalItem");

                    b.Navigation("UsedBy");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationAdministration", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "AdministeredBy")
                        .WithMany("MedicationAdministrations")
                        .HasForeignKey("AdministeredById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", "StudentMedication")
                        .WithMany("Administrations")
                        .HasForeignKey("StudentMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministeredBy");

                    b.Navigation("StudentMedication");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationSchedule", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationAdministration", "Administration")
                        .WithMany("CompletedSchedules")
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", "StudentMedication")
                        .WithMany("Schedules")
                        .HasForeignKey("StudentMedicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Administration");

                    b.Navigation("StudentMedication");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationStock", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", "StudentMedication")
                        .WithMany("StockHistory")
                        .HasForeignKey("StudentMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentMedication");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Notification", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("Notifications")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", "HealthEvent")
                        .WithMany("Notifications")
                        .HasForeignKey("HealthEventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Recipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationRecord", "VaccinationRecord")
                        .WithMany("Notifications")
                        .HasForeignKey("VaccinationRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Appointment");

                    b.Navigation("HealthCheck");

                    b.Navigation("HealthEvent");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");

                    b.Navigation("VaccinationRecord");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.PhysicalRecord", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("PhysicalRecords")
                        .HasForeignKey("HealthCheckId");

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("PhysicalRecords")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "RecordedByUser")
                        .WithMany()
                        .HasForeignKey("RecordedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("MedicalRecord");

                    b.Navigation("RecordedByUser");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Report", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "GeneratedBy")
                        .WithMany("GeneratedReports")
                        .HasForeignKey("GeneratedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GeneratedBy");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentClass", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.SchoolClass", "SchoolClass")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "ApprovedBy")
                        .WithMany("ApprovedMedications")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Parent")
                        .WithMany("SentMedications")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedicationRequest", "Request")
                        .WithMany("MedicationsDetails")
                        .HasForeignKey("StudentMedicationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Parent");

                    b.Navigation("Request");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedicationRequest", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedicationUsageHistory", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("AdministeredBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", "StudentMedication")
                        .WithMany("UsageHistory")
                        .HasForeignKey("StudentMedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Student");

                    b.Navigation("StudentMedication");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.UserRole", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationAssignment", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.SchoolClass", "SchoolClass")
                        .WithMany("VaccinationAssignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Nurse")
                        .WithMany("VaccinationAssignments")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", "Session")
                        .WithMany("Assignments")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("SchoolClass");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationConsent", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Parent")
                        .WithMany("ParentVaccinationConsents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", "Session")
                        .WithMany("Consents")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany("VaccinationConsents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationRecord", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "AdministeredByUser")
                        .WithMany()
                        .HasForeignKey("AdministeredByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", "Session")
                        .WithMany("Records")
                        .HasForeignKey("SessionId");

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationType", "VaccinationType")
                        .WithMany("Records")
                        .HasForeignKey("VaccinationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdministeredByUser");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Session");

                    b.Navigation("Student");

                    b.Navigation("VaccinationType");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "ApprovedBy")
                        .WithMany("ApprovedVaccinationSessions")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("CreatedVaccinationSessions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationType", "VaccineType")
                        .WithMany("Sessions")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSessionClass", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.SchoolClass", "SchoolClass")
                        .WithMany("VaccinationSessionClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", "Session")
                        .WithMany("Classes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VisionRecord", b =>
                {
                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", "HealthCheck")
                        .WithMany("VisionRecords")
                        .HasForeignKey("HealthCheckId");

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("VisionRecords")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", "RecordedByUser")
                        .WithMany()
                        .HasForeignKey("RecordedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");

                    b.Navigation("MedicalRecord");

                    b.Navigation("RecordedByUser");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ApprovedMedications");

                    b.Navigation("ApprovedVaccinationSessions");

                    b.Navigation("BlogComments");

                    b.Navigation("BlogPosts");

                    b.Navigation("Children");

                    b.Navigation("ConductedHealthChecks");

                    b.Navigation("CreatedVaccinationSessions");

                    b.Navigation("GeneratedReports");

                    b.Navigation("HandledHealthEvents");

                    b.Navigation("HealthCheckConsents");

                    b.Navigation("MedicalRecord")
                        .IsRequired();

                    b.Navigation("MedicationAdministrations");

                    b.Navigation("ParentHealthCheckConsents");

                    b.Navigation("ParentVaccinationConsents");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentMedications");

                    b.Navigation("SentNotifications");

                    b.Navigation("StudentClasses");

                    b.Navigation("UserRoles");

                    b.Navigation("VaccinationAssignments");

                    b.Navigation("VaccinationConsents");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Appointment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheck", b =>
                {
                    b.Navigation("CheckItems");

                    b.Navigation("HealthCheckAssignments");

                    b.Navigation("HealthCheckClasses");

                    b.Navigation("HealthCheckConsents");

                    b.Navigation("HearingRecords");

                    b.Navigation("MedicalConditions");

                    b.Navigation("Notifications");

                    b.Navigation("PhysicalRecords");

                    b.Navigation("Results");

                    b.Navigation("VisionRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckAssignment", b =>
                {
                    b.Navigation("HealthCheckItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckItem", b =>
                {
                    b.Navigation("ResultItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthCheckResult", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ResultItems");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.HealthEvent", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthEventMedicalItems");

                    b.Navigation("MedicalItemsUsed");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItem", b =>
                {
                    b.Navigation("Usages");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalItemUsage", b =>
                {
                    b.Navigation("HealthEventMedicalItem")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicalRecord", b =>
                {
                    b.Navigation("HearingRecords");

                    b.Navigation("MedicalConditions");

                    b.Navigation("PhysicalRecords");

                    b.Navigation("VaccinationRecords");

                    b.Navigation("VisionRecords");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.MedicationAdministration", b =>
                {
                    b.Navigation("CompletedSchedules");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.SchoolClass", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("VaccinationAssignments");

                    b.Navigation("VaccinationSessionClasses");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedication", b =>
                {
                    b.Navigation("Administrations");

                    b.Navigation("Schedules");

                    b.Navigation("StockHistory");

                    b.Navigation("UsageHistory");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.StudentMedicationRequest", b =>
                {
                    b.Navigation("MedicationsDetails");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationRecord", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationSession", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Classes");

                    b.Navigation("Consents");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("SchoolMedicalManagementSystem.DataAccessLayer.Entities.VaccinationType", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
